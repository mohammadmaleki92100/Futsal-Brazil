import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import metrics
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv ('Futsal_Brazil_Data.csv') # Call the dataset
df

df.describe()
df.corr()

plt.scatter (df['StressLevel'], df['CreativityScore'])  # Example of data visualization
plt.grid()
plt.xlabel ('StressLevel')
plt.ylabel ('CreativityScore')
plt.show()

X = df [['HeartRate', 'StressLevel', 'CreativityScore', 'Goals']]  # Defining X and y variables
y = df ['Errors']

scaler = MinMaxScaler()  # Making normalization
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = .2, random_state = 0)  # Spliting the train and test data

model = LinearRegression()  # Making the Regression model
model.fit (X_train, y_train)
y_pred = model.predict (X_test)

print('Mean Absolute Error:', metrics.mean_absolute_error (y_test, y_pred))  # The evaluations
print('Mean Squared Error:', metrics.mean_squared_error (y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt (metrics.mean_squared_error (y_test, y_pred)))
print('r2 scored:', metrics.r2_score (y_test, y_pred))

